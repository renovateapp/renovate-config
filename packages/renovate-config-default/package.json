{
  "name": "renovate-config-default",
  "description": "Default preset configs for Renovate",
  "author": "Rhys Arkins <rhys@arkins.net>",
  "license": "MIT",
  "homepage": "https://github.com/singapore/renovate-config",
  "repository": {
    "type": "git",
    "url": "git+https://rarkins@github.com/singapore/renovate-config.git"
  },
  "bugs": {
    "url": "https://github.com/singapore/renovate-config/issues"
  },
  "version": "0.3.0",
  "renovate-config": {
    "enableRenovate": {
      "description": "Enable renovate",
      "enabled": true
    },
    "disableRenovate": {
      "description": "Disable renovate",
      "enabled": false
    },
    "ignoreModulesAndTests": {
      "description": "Ignore `node_modules`, `bower_components`, and various test/tests directories",
      "ignorePaths": [
        "**/node_modules/**",
        "**/bower_components/**",
        "**/examples/**",
        "**/__tests__/**",
        "**/test/**",
        "**/tests/**"
      ]
    },
    "includeNodeModules": {
      "description": "Include <code>package.json</code> files found within <code>node_modules</code> folders or <code>bower_components</code>.",
      "ignorePaths": []
    },
    "pinVersions": {
      "description": "Use version pinning (maintain a single version only and not semver ranges)",
      "pinVersions": true
    },
    "preserveSemverRanges": {
      "description": "Preserve (but continue to upgrade) any existing semver ranges",
      "pinVersions": false
    },
    "pinOnlyDevDependencies": {
      "description": "Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others",
      "dependencies": {
        "extends": ":preserveSemverRanges"
      },
      "devDependencies": {
        "extends": ":pinVersions"
      },
      "optionalDependencies": {
        "extends": ":preserveSemverRanges"
      },
      "peerDependencies": {
        "extends": ":preserveSemverRanges"
      }
    },
    "autodetectPinVersions": {
      "description": "Autodetect whether to pin dependencies or maintain ranges",
      "pinVersions": null
    },
    "separateMajorReleases": {
      "description": "Separate major versions of dependencies into individual branches/PRs",
      "separateMajorReleases": true
    },
    "separatePatchReleases": {
      "description": "Separate patch and minor releases of dependencies into separate PRs",
      "separatePatchReleases": true
    },
    "combinePatchMinorReleases": {
      "description": "Combine any patch and minor upgrades together into same branch/PR",
      "separatePatchReleases": false
    },
    "renovatePrefix": {
      "description": "Use <code>renovate/</code> as prefix for all branch names",
      "branchPrefix": "renovate/"
    },
    "semanticCommitType": {
      "description": "Use <code>{{arg0}}</code> as semantic commit type for commit messages and PR titles",
      "semanticCommitType": "{{arg0}}"
    },
    "semanticPrefixChore": {
      "description": "Use <code>chore</code> as semantic commit type for commit messages and PR titles",
      "extends": [
        ":semanticCommitType(chore)"
      ]
    },
    "semanticPrefixFix": {
      "description": "Use <code>fix</code> as semantic commit type for commit messages and PR titles",
      "extends": [
        ":semanticCommitType(fix)"
      ]
    },
    "disablePeerDependencies": {
      "description": "Do not renovate <code>peerDependencies</code> versions/ranges",
      "peerDependencies": {
        "enabled": false
      }
    },
    "semanticPrefixFixDepsChoreOthers": {
      "description": "If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others",
      "dependencies": {
        "extends": ":semanticCommitType(fix)"
      },
      "devDependencies": {
        "extends": ":semanticCommitType(chore)"
      },
      "optionalDependencies": {
        "extends": ":semanticCommitType(chore)"
      },
      "peerDependencies": {
        "extends": ":semanticCommitType(chore)"
      }
    },
    "semanticCommitTypeAll": {
      "description": "If semantic commits detected, use semantic commit type <code>{{arg0}}</code> for all",
      "dependencies": {
        "extends": ":semanticCommitType({{arg0}})"
      },
      "devDependencies": {
        "extends": ":semanticCommitType({{arg0}})"
      },
      "optionalDependencies": {
        "extends": ":semanticCommitType({{arg0}})"
      },
      "peerDependencies": {
        "extends": ":semanticCommitType({{arg0}})"
      },
      "pin": {
        "extends": ":semanticCommitType({{arg0}})"
      },
      "digest": {
        "extends": ":semanticCommitType({{arg0}})"
      }
    },
    "rebaseStalePrs": {
      "description": "Rebase existing PRs any time the base branch has been updated",
      "rebaseStalePrs": true
    },
    "unpublishSafe": {
      "description": "Set a status check to warn when upgrades <  24 hours old might get unpublished",
      "unpublishSafe": true
    },
    "unpublishSafeDisabled": {
      "description": "Create branches/PRs for dependency upgrades as soon as they're available",
      "unpublishSafe": false
    },
    "prImmediately": {
      "description": "Raise PRs immediately (after branch is created)",
      "prCreation": "immediate"
    },
    "prNotPending": {
      "description": "Wait until branch tests have passed or failed before creating the PR",
      "prCreation": "not-pending"
    },
    "prHourlyLimitNone": {
      "description": "Removes rate limit for PR creation per hour",
      "prHourlyLimit": 0
    },
    "prHourlyLimit1": {
      "description": "Rate limit PR creation to a maximum of one per hour",
      "prHourlyLimit": 1
    },
    "prHourlyLimit2": {
      "description": "Rate limit PR creation to a maximum of two per hour",
      "prHourlyLimit": 2
    },
    "prHourlyLimit4": {
      "description": "Rate limit PR creation to a maximum of four per hour",
      "prHourlyLimit": 4
    },
    "prConcurrentLimit10": {
      "description": "Limit to maximum 10 concurrent Renovate PRs at any time",
      "prConcurrentLimit": 10
    },
    "prConcurrentLimit20": {
      "description": "Limit to maximum 20 concurrent Renovate PRs at any time",
      "prConcurrentLimit": 20
    },
    "automergeDisabled": {
      "description": "Disable automerging feature - wait for humans to merge all PRs",
      "automerge": false
    },
    "automergeDigest": {
      "description": "Automerge digest upgrades if they pass tests",
      "digest": {
        "automerge": true
      }
    },
    "automergePatch": {
      "description": "Automerge patch upgrades if they pass tests",
      "patch": {
        "automerge": true
      }
    },
    "automergeMinor": {
      "description": "Automerge patch and minor upgrades if they pass tests",
      "minor": {
        "automerge": true
      },
      "patch": {
        "automerge": true
      }
    },
    "automergeMajor": {
      "description": "Automerge all upgrades (inluding major) if they pass tests",
      "automerge": true
    },
    "automergeAll": {
      "description": "Automerge all upgrades (inluding major) if they pass tests",
      "automerge": true
    },
    "automergeBranchMergeCommit": {
      "description": "If automerging, perform a merge-commit on branch (no PR)",
      "automergeType": "branch-merge-commit"
    },
    "automergeBranchPush": {
      "description": "If automerging, push the new commit directly to base branch (no PR)",
      "automergeType": "branch-push"
    },
    "automergePr": {
      "description": "Raise a PR first before any automerging",
      "automergeType": "pr"
    },
    "automergeRequireAllStatusChecks": {
      "description": "Require all status checks to pass before any automerging",
      "requiredStatusChecks": []
    },
    "skipStatusChecks": {
      "description": "Skip status checks and automerge right away",
      "requiredStatusChecks": null
    },
    "maintainLockFilesDisabled": {
      "description": "Update existing lock files only when <code>package.json</code> is modified",
      "lockFileMaintenance": {
        "enabled": false
      }
    },
    "pinDigestsDisabled": {
      "description": "Disable pinning of docker dependency digests",
      "pinDigests": false
    },
    "maintainLockFilesWeekly": {
      "description": "Run lock file maintenance (updates) early Monday mornings",
      "lockFileMaintenance": {
        "enabled": true,
        "extends": "schedule:weekly"
      }
    },
    "maintainLockFilesMonthly": {
      "description": "Run lock file maintenance (updates) on the first day of each month",
      "lockFileMaintenance": {
        "enabled": true,
        "extends": "schedule:monthly"
      }
    },
    "ignoreUnstable": {
      "description": "Upgrade to unstable versions only if the existing version is unstable",
      "ignoreUnstable": true
    },
    "respectLatest": {
      "description": "Upgrade versions up to the \"latest\" tag in npm registry",
      "respectLatest": true
    },
    "updateNotScheduled": {
      "description": "Keep existing branches updated even when not scheduled",
      "updateNotScheduled": true
    },
    "noUnscheduledUpdates": {
      "description": "Make no updates to branches when not scheduled",
      "updateNotScheduled": false
    },
    "automergeLinters": {
      "description": "Update lint packages automatically if tests pass",
      "packageRules": [
        {
          "extends": [
            "packages:linters"
          ],
          "automerge": true
        }
      ]
    },
    "doNotPinPackage": {
      "description": "Disable version pinning for <code>{{arg0}}</code>",
      "packageRules": [
        {
          "packageNames": [
            "{{arg0}}"
          ],
          "pinVersions": false
        }
      ]
    },
    "pinSkipCi": {
      "description": "Add [skip ci] to commit message body whenever pinning",
      "pin": {
        "commitBody": "[skip ci]"
      }
    },
    "gitSignOff": {
      "description": "Append git Signed-off-by signature to git commits.",
      "commitBody": "Signed-off-by: {{{gitAuthor}}}"
    },
    "npm": {
      "description": "Keep package.json npm dependencies updated",
      "javascript": {
        "enabled": true
      }
    },
    "onlyNpm": {
      "description": "Renovate only npm dependencies",
      "docker": {
        "enabled": false
      },
      "meteor": {
        "enabled": false
      }
    },
    "docker": {
      "description": "Keep Dockerfile FROM sources updated",
      "docker": {
        "enabled": true
      }
    },
    "meteor": {
      "description": "Keep Meteor Npm.depends packages updated",
      "meteor": {
        "enabled": true
      }
    },
    "group": {
      "description": "Group {{arg1}} packages into same branch/PR",
      "packageRules": [
        {
          "extends": [
            "{{arg0}}"
          ],
          "groupName": "{{arg1}}"
        }
      ]
    },
    "label": {
      "description": "Apply label <code>{{arg0}}</code> to PRs",
      "labels": [
        "{{arg0}}"
      ]
    },
    "labels": {
      "description": "Apply labels <code>{{arg0}}</code> and <code>{{arg1}}</code> to PRs",
      "labels": [
        "{{arg0}}",
        "{{arg1}}"
      ]
    },
    "assignee": {
      "description": "Assign PRs to <code>{{arg0}}</code>",
      "assignees": [
        "{{arg0}}"
      ]
    },
    "reviewer": {
      "description": "Add <code>{{arg0}}</code> as reviewer for PRs",
      "reviewers": [
        "{{arg0}}"
      ]
    },
    "assignAndReview": {
      "description": "Set <code>{{arg0}}</code> as assignee and reviewer of PRs",
      "extends": [
        ":assignee({{arg0}})",
        ":reviewer({{arg0}})"
      ]
    },
    "semanticCommits": {
      "description": "Use semantic prefixes for commit messages and PR titles",
      "semanticCommits": true
    },
    "semanticCommitsDisabled": {
      "description": "Disable semantic prefixes for commit messages and PR titles",
      "semanticCommits": false
    },
    "disableLockFiles": {
      "description": "Disable lock file updates",
      "updateLockFiles": false
    },
    "semanticCommitScope": {
      "description": "Use semantic commit scope <code>{{arg0}}</code> for all commits and PR titles",
      "semanticCommitScope": "{{arg0}}"
    },
    "semanticCommitScopeDisabled": {
      "description": "Disable semantic commit scope for all commits and PR titles",
      "semanticCommitScope": null
    },
    "widenPeerDependencies": {
      "description": "Always widen peerDependencies semver ranges when updating, instead of replacing",
      "versionStrategy": "widen"
    },
    "timezone": {
      "description": "Evaluate schedules according to timezone {{arg0}}",
      "timezone": "{{arg0}}"
    },
    "pathSemanticCommitType": {
      "description": "Use semanticCommitType {{arg0}} for all package files matching path {{arg1}}",
      "pathRules": [
        {
          "paths": [
            "{{arg0}}"
          ],
          "extends": [
            ":semanticCommitTypeAll({{arg1}})"
          ]
        }
      ]
    },
    "base": {
      "description": "deprecated alias for config:base",
      "extends": [
        "config:base"
      ]
    },
    "app": {
      "description": "deprecated alias for config:js-app",
      "extends": [
        "config:js-app"
      ]
    },
    "library": {
      "description": "deprecated alias for config:js-lib",
      "extends": [
        "config:js-lib"
      ]
    }
  }
}
